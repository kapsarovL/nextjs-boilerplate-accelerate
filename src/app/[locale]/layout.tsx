import type { Metadata } from "next";

import { Geist, Geist_Mono } from "next/font/google";
import { NextIntlClientProvider, useMessages } from 'next-intl';
import { notFound } from 'next/navigation';
import { isValidLocale } from '@/i18n'; // Generated by Copilot
import { ThemeProvider } from "@/components/providers/theme-provider";
import SessionProvider from "@/components/providers/session-provider";
import { Toaster } from "react-hot-toast";
import "../globals.css";

const geistSans = Geist({
  variable: "--font-geist-sans",
  subsets: ["latin"],
});

const geistMono = Geist_Mono({
  variable: "--font-geist-mono",
  subsets: ["latin"],
});

export const metadata: Metadata = {
  title: "Create Next App",
  description: "Generated by create next app",
};

interface RootLayoutProps {
    children: React.ReactNode;
    params: {
        locale: string;
    }
}

export default function RootLayout({
  children,
  params: {locale}
}: Readonly<RootLayoutProps>) {

    if (!isValidLocale(locale)) {
        notFound();
    }

    const messages = useMessages();
  return (
    <html lang={locale} suppressHydrationWarning>
      <body className={`min-h-screen bg-background font-sans anialised ${geistSans.variable} ${geistMono.variable}`}>
        <SessionProvider>
            <NextIntlClientProvider locale={locale} messages={messages}>
        <ThemeProvider
              attribute="class"
              defaultTheme="system"
              enableSystem
              disableTransitionOnChange
            >
                {/* Place Toaster inside providers but outside main layout structure */}
                
                <Toaster
                position="top-center"
                reverseOrder={false}
                toastOptions={{
                    duration: 5000,
                    style: {
                        background: 'hsl(var(--background))',
                        color: 'hsl(var(--foreground))',
                        border: '1px solid hsl(var(--border))',
                    },

                    success: {
                        duration: 3000,

                    },
                    error: {
                        duration: 5000,
                    }
                }}
                />
                <div className="relative flex flex-col min-h-screen">
          <main className="flex-1">{children}</main>
          </div>
        </ThemeProvider>
        </NextIntlClientProvider>
        </SessionProvider>
      </body>
    </html>
  );
}
